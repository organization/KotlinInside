import org.jmailen.gradle.kotlinter.tasks.*

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.5.21'
    id 'org.jetbrains.dokka' version '1.4.32'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'signing'
    id 'org.jmailen.kotlinter' version '3.4.5'
}

def libName = 'KotlinInside'
def libDevVersion = ''
def libVersion = "1.9.2$libDevVersion"
def libDesc = 'Unofficial DCInside API written in Kotlin'

group = 'be.zvz'
version = libVersion

repositories {
    // Use mavenCentral for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

dependencies {
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.9'

    //Jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'

    //FlexMark
    implementation group: 'com.vladsch.flexmark', name: 'flexmark', version: '0.62.2'
    implementation group: 'com.vladsch.flexmark', name: 'flexmark-ext-gfm-strikethrough', version: '0.62.2'
    implementation group: 'com.vladsch.flexmark', name: 'flexmark-ext-tables', version: '0.62.2'
    implementation group: 'com.vladsch.flexmark', name: 'flexmark-ext-gfm-tasklist', version: '0.62.2'

    // Use the Kotlin JDK standard library.
    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7'
    // Use the Kotlin coroutines library.
    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: '1.5.1'
    // Use the Kotlin test library.
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test'
    // Use the Kotlin JUnit integration.
    testImplementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit5'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.7.2'
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
    }
}

dokkaJekyll {
    outputDirectory.set(file("docs"))

    dokkaSourceSets {
        configureEach {
            platform.set(org.jetbrains.dokka.Platform.jvm)

            jdkVersion.set(7)
            noStdlibLink.set(false)
            noJdkLink.set(false)

            sourceRoots.setFrom(file("src/main/kotlin"))
            sourceRoots.from(file("src/main/java"))
        }
    }
}

// Maven-Central publish
task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task ktLint(type: LintTask, group: 'verification') {
    source files('src')
}

task ktFormat(type: FormatTask, group: 'formatting') {
    source files('src')
    report = file('build/format-report.txt')
    disabledRules = ["import-ordering"]
}

signing {
    useGpgCmd()
    sign publishing.publications
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

project.publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            artifact sourcesJar
            artifact javadocJar
            artifactId = libName
            pom {
                name = libName
                description = 'Unofficial DCInside API written in Kotlin'
                url = 'https://github.com/organization/KotlinInside'
                inceptionYear = '2019'
                packaging = 'jar'
                groupId = 'be.zvz'
                artifactId = libName
                version = libVersion
                licenses {
                    license {
                        name = 'GNU General Public License 3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'JellyBrick'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/organization/KotlinInside.git'
                    developerConnection = 'scm:git:ssh://git@github.com:organization/KotlinInside.git'
                    url = 'https://github.com/organization/KotlinInside.git'
                }
            }
        }
    }
}

project.nexusPublishing {
    packageGroup = group
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            def localProps = new Properties()
            File propFile = project.file('local.properties')
            if (propFile.exists()) {
                localProps.load(propFile.newDataInputStream())

                username = localProps.getProperty('centralUser')
                password = localProps.getProperty('centralPassword')
            }
        }
    }
}
